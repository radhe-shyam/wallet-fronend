{"version":3,"sources":["api/wallet-backend.js","app.js","index.js"],"names":["walletBackend","axios","create","baseURL","headers","disableSwalConfig","allowEscapeKey","backdrop","allowOutsideClick","App","useState","user","setUser","transList","setTranslist","currentPage","setCurrentPage","skipRecords","setSkipRecords","isExportProcessing","setIsExportProcessing","limitRecords","getUserDetails","a","get","id","data","localStorage","setItem","JSON","stringify","clear","getTransList","params","walletId","skip","limit","Array","length","exportToCSV","replace","parse","csvData","Object","keys","forEach","ele","push","values","csvContent","join","encodedUri","encodeURI","link","document","createElement","setAttribute","name","body","appendChild","click","Swal","fire","toString","addOrPayMoney","event","action","target","dataset","title","html","showCancelButton","confirmButtonText","showLoaderOnConfirm","preConfirm","amount","getElementById","value","description","RegExp","test","showValidationMessage","successMsg","post","then","result","catch","error","errorMsg","response","prettyMsg","focus","pageChangeListener","variation","Math","ceil","useEffect","oldUser","getItem","e","text","input","inputPlaceholder","balance","newUser","className","onClick","map","index","Date","date","toLocaleString","type","abs","ReactDom","render","StrictMode"],"mappings":"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","file":"static/js/main.93208d41.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst walletBackend = axios.create({\n    baseURL: 'https://wallet--backend.herokuapp.com/api',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default walletBackend;","import Swal from 'sweetalert2'\nimport walletBackend from './api/wallet-backend';\nimport { useState, useEffect } from 'react';\nimport './app.css';\nconst disableSwalConfig = {\n    allowEscapeKey: false,\n    backdrop: true,\n    allowOutsideClick: false\n};\n\n\nconst App = () => {\n    const [user, setUser] = useState(null);\n    const [transList, setTranslist] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [skipRecords, setSkipRecords] = useState(0);\n    const [isExportProcessing, setIsExportProcessing] = useState(false);\n    const limitRecords = 10;\n    const getUserDetails = async (user) => {\n\n        try {\n            const { data: { data } } = await walletBackend.get(`/wallet/${user.id}`);\n            setUser(data);\n            localStorage.setItem('user', JSON.stringify(user));\n        } catch (error) {\n            localStorage.clear();\n        }\n    }\n    const getTransList = async (user, skipRecords) => {\n\n        try {\n            const { data: { data } } = await walletBackend.get(`/transactions`, {\n                params: {\n                    walletId: user.id,\n                    skip: skipRecords,\n                    limit: limitRecords\n                }\n            });\n            if (data instanceof Array && data.length) {\n                setTranslist(data);\n            }\n            return data;\n        } catch (error) {\n\n        }\n    }\n\n    const exportToCSV = async () => {\n\n        try {\n            setIsExportProcessing(true);\n            let { data } = await walletBackend.get(`/transactions/all/${user.id}`);\n            data = data.replace(/}/g, \"},\").replace(/,]/, \"]\");\n            data = JSON.parse(data);\n            if (data instanceof Array && data.length) {\n                let csvData = [Object.keys(data[0])];\n                data.forEach(ele => csvData.push(Object.values(ele)));\n                let csvContent = \"data:text/csv;charset=utf-8,\" + csvData.join('\\n');\n                var encodedUri = encodeURI(csvContent);\n                // window.open(encodedUri);\n                var link = document.createElement(\"a\");\n                link.setAttribute(\"href\", encodedUri);\n                link.setAttribute(\"download\", `${user.name} - transactions.csv`);\n                document.body.appendChild(link);\n                link.click();\n                setIsExportProcessing(false);\n            }\n        } catch (error) {\n            setIsExportProcessing(false);\n            Swal.fire('Error', error.toString(), 'error');\n        }\n    }\n\n\n\n    const addOrPayMoney = (event) => {\n        const action = event.target.dataset.action;\n        const html = `\n            <form>\n             <label>Enter the amount(with max 4 decimal point). e.g. \"1000\" or \"10.5555\"</label><br/>\n             <input id=\"amount\" autocomplete=\"off\" class=\"swal2-input\" placeholder=\"Amount\" type=\"number\" />\n             <input id=\"description\" autocomplete=\"off\" class=\"swal2-input\" placeholder=\"Description\" type=\"text\" />\n            </form>\n        `;\n        Swal.fire({\n            title: `${action} Money`,\n            html: html,\n            showCancelButton: true,\n            confirmButtonText: action,\n            showLoaderOnConfirm: true,\n            ...disableSwalConfig,\n            preConfirm: () => {\n                let amount = +document.getElementById('amount').value;\n                let description = document.getElementById('description').value;\n                if (!amount || amount < 0.0001 || amount > 1000000 || !(new RegExp(/^\\d*(\\.\\d{1,4})?$/).test(amount))) return Swal.showValidationMessage(`Amount should be between 0.0001 to 1000000. Max. decimal points are 4`);\n                if (!description) return Swal.showValidationMessage(`Description can't be empty`);\n                let successMsg = `You added INR ${amount} in your wallet!`;\n                if (action === 'Pay') {\n                    successMsg = `You paid INR ${amount} from your wallet!`;\n                    amount = -amount;\n                }\n                return walletBackend.post(`/transact/${user.id}`, {\n                    amount,\n                    description\n                }).then(result => {\n                    Swal.fire(`Good job! ${user.name}`, successMsg, \"success\");\n                    getUserDetails(user);\n                    getTransList(user, skipRecords);\n                }).catch(error => {\n                    let errorMsg = `Request failed: ${error}`;\n                    if (error && error.response && error.response.data) {\n                        errorMsg = error.response.data.prettyMsg;\n                    }\n                    Swal.showValidationMessage(errorMsg);\n                });\n            }\n        });\n        document.getElementById('amount').focus();\n    }\n    const pageChangeListener = async (action) => {\n        let variation;\n        if (action === 'prev') {\n            if (skipRecords === 0) {\n                return;\n            }\n            variation = skipRecords - limitRecords;\n        } else {\n            if (transList.length < limitRecords) {\n                return;\n            }\n            variation = skipRecords + limitRecords;\n        }\n        const data = await getTransList(user, variation);\n        if (data instanceof Array && data.length === 0) {\n            variation = (action === 'prev')\n                ? variation + limitRecords\n                : variation - limitRecords;\n        }\n        setSkipRecords(variation);\n        setCurrentPage(Math.ceil((variation + 1) / limitRecords));\n\n    }\n    useEffect(() => {\n        let oldUser;\n        try {\n            oldUser = JSON.parse(localStorage.getItem('user'));\n        } catch (e) { }\n\n        walletBackend.get(`/health`); //just to warm up the backend server\n        if (oldUser && oldUser.id) {\n            getUserDetails(oldUser);\n            getTransList(oldUser, skipRecords);\n        } else {\n            Swal.fire({\n                title: 'Setup new wallet',\n                text: 'Enter your name. e.g. \"Madhav Sharma\".',\n                input: 'text',\n                inputPlaceholder: \"Name\",\n                showCancelButton: false,\n                confirmButtonText: 'Create!',\n                showLoaderOnConfirm: true,\n                ...disableSwalConfig,\n                preConfirm: (name) => {\n                    if (!name || name.length < 4 || name.length > 25) return Swal.showValidationMessage(`Name length should be between 4 to 25 characters`);\n                    return walletBackend.post('/wallet/setup', {\n                        name,\n                        balance: 0\n                    }).then(result => {\n                        let newUser = result.data.data;\n                        setUser(newUser)\n                        localStorage.setItem('user', JSON.stringify(newUser));\n                        Swal.fire(`Good job! ${result.data.data.name}`, \"Your wallet is ready to use!\", \"success\");\n                    }).catch(error => {\n                        let errorMsg = `Request failed: ${error}`;\n                        if (error && error.response && error.response.data) {\n                            errorMsg = error.response.data.prettyMsg;\n                        }\n                        Swal.showValidationMessage(errorMsg);\n                    });\n                }\n            });\n        }\n\n    }, []);// eslint-disable-line react-hooks/exhaustive-deps\n    return (\n        <>\n            {(user && user.id) ? (\n                <>\n                    <div className=\"ui raised very padded text container segment\">\n                        <div className=\"card\">\n                            <div className=\"content\">\n                                <div className=\"header\">\n                                    Hello, {user.name} 👋\n                                </div>\n                                <br></br>\n                                <div className=\"description\">\n                                    Current Balance: INR <b>{user.balance}</b>\n                                </div>\n                            </div>\n                            <div className=\"extra content\">\n                                <div className=\"ui two buttons\">\n                                    <div className=\"ui basic green button\" data-action=\"Add\" onClick={(e) => addOrPayMoney(e)}>Add Money</div>\n                                    <div className=\"ui basic red button\" data-action=\"Pay\" onClick={(e) => addOrPayMoney(e)}>Pay</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </>\n            ) : (\n                <div className=\"ui active inverted dimmer\">\n                    <div className=\"ui large text loader\">Loading</div>\n                </div>\n            )\n            }\n            {(transList && transList.length) ? (\n                <>\n                    <div className=\"ui raised very padded text container segment\">\n                        <h1>Transactions</h1>\n                        <button title=\"Export in CSV\" className={`ui icon button basic positive right floated ${isExportProcessing ? 'loading disabled' : ''}`} onClick={() => exportToCSV()}>\n                            <i className=\"download icon\"></i>\n                        </button>\n                        <div>\n                        </div>\n                        <table className=\"ui celled table fixed unstackable\">\n                            <thead>\n                                <tr><th>Date</th>\n                                    <th>Description</th>\n                                    <th>Amount</th>\n                                    <th>Balance</th>\n                                </tr></thead>\n                            <tbody>\n                                {transList.map((ele, index) => (<tr key={index}>\n                                    <td data-label=\"Date\">{new Date(ele.date).toLocaleString()}</td>\n                                    <td data-label=\"Description\">{ele.description}</td>\n                                    <td className={ele.type === 'CREDIT' ? 'positive' : 'negative'} data-label=\"Amount\">{Math.abs(ele.amount)} ({ele.type === 'CREDIT' ? 'Cr' : 'Dr'})</td>\n                                    <td data-label=\"Balance\">{ele.balance}</td>\n                                </tr>))}\n                            </tbody>\n                        </table>\n                        <div className=\"ui buttons three\" >\n                            <button className={`ui button ${(skipRecords === 0) ? 'disabled' : 'active'}`} onClick={() => pageChangeListener('prev')}>\n                                <i className=\"left arrow icon\"></i>Previous\n                            </button>\n                            <div className=\"or\" data-Text={currentPage}></div>\n                            <button className={`ui button ${(limitRecords > transList.length) ? 'disabled' : 'active'}`} onClick={() => pageChangeListener('next')}>\n                                Next<i className=\"right arrow icon\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </>\n            ) : null}\n        </>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './app';\n\nReactDom.render(\n    <React.StrictMode><App /></React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}